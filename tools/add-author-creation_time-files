#!/bin/bash
#
# Check out the specified branch (or `entomologist-data` if not specified)
# in a temporary worktree.
#
# For each issue:
#
#     run `git log` to find the author and ctime of the first commit in the issue
#
#     create `author` and `creation_time` with those values
#
#     git commit

set -e
#set -x

function add_author_ctime_files() {
    if [[ -f "author" ]] && [[ -f "creation_time" ]] ; then
        # This directory is good already, nothing to do.
        return
    fi

    COMMIT_MSG="$1"

    read CTIME AUTHOR <<< $(git log --pretty=format:'%at %an <%ae>' -- . | tail -1)
    CTIME=$(date --rfc-3339=seconds --date="@${CTIME}")

    echo -n "${AUTHOR}" >| author
    echo -n "${CTIME}" >| creation_time

    git add author creation_time
    git commit -m "${COMMIT_MSG}"
}


function update_issue() {
    ISSUE_ID="$1"

    add_author_ctime_files "issue ${ISSUE_ID}: add author and creation_time files"

    if [[ -d "comments" ]]; then
        pushd comments > /dev/null
        for COMMENT_ID in $(find . -maxdepth 1 -type d -regextype posix-extended -regex '\./[0-9a-f]{32}'); do
            COMMENT_ID=$(basename "${COMMENT_ID}")
            pushd "${COMMENT_ID}" > /dev/null
            add_author_ctime_files "comment ${ISSUE_ID}/${COMMENT_ID}: add author and creation_time files"
            popd > /dev/null
        done
        popd > /dev/null
    fi
}


BRANCH=""

if [[ -n "$1" ]] && [[ -d "$1" ]]; then
    echo "updating ent db in directory '$1'"
    pushd "$1"
else
    if [[ -n "$1" ]]; then
        # better be a branch
        BRANCH="$1"
    else
        BRANCH="entomologist-data"
    fi
    echo "updating ent db in branch '${BRANCH}'"
    WORKTREE_DIR=$(mktemp --directory)
    git worktree add "${WORKTREE_DIR}" "${BRANCH}"
    pushd "${WORKTREE_DIR}" > /dev/null
fi

# Now our current working directory is the ent db that we're supposed
# to update.
#
# If $BRANCH is empty, we're in a directory not tracked by git and we
# just change the files.
#
# If $BRANCH is not empty, we're in a git worktree of the branch we're
# supposed to change, so we commit as we go.

for ISSUE_ID in $(find . -maxdepth 1 -type d -regextype posix-extended -regex '\./[0-9a-f]{32}'); do
    ISSUE_ID=$(basename "${ISSUE_ID}")
    pushd "${ISSUE_ID}" > /dev/null
    update_issue "${ISSUE_ID}"
    popd > /dev/null
done

popd > /dev/null

if [[ -n "${BRANCH}" ]]; then
    git worktree remove "${WORKTREE_DIR}"
fi
